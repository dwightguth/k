// Copyright (c) 2013-2014 K Team. All Rights Reserved.
options {
  STATIC = false;
  UNICODE_INPUT = true;
  SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
  TOKEN_MANAGER_USES_PARSER = true;
  // FORCE_LA_CHECK = true; // Useful for development, but causes a warning in Production()
}

PARSER_BEGIN(KastParser)
package org.kframework.utils.kastparser;

import org.kframework.kil.KApp;
import org.kframework.kil.KLabelConstant;
import org.kframework.kil.KList;
import org.kframework.kil.KSequence;
import org.kframework.attributes.Location;
import org.kframework.kil.Sort;
import org.kframework.attributes.Source;
import org.kframework.kil.Term;
import org.kframework.kil.loader.Context;
import org.kframework.utils.StringUtil;
import org.kframework.utils.errorsystem.KExceptionManager;

import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;

public class KastParser {
	public static Term parse(String kast, Source source) {
		KastParser parser = new KastParser(new StringReader(kast));
		try {
			return parser.k();
		} catch (ParseException e) {
      		throw KExceptionManager.innerParserError(e.getMessage(), e, source,
      			new Location(e.currentToken.beginLine, e.currentToken.beginColumn,
      			             e.currentToken.endLine, e.currentToken.endColumn));
        } catch (TokenMgrError e) {
            throw KExceptionManager.innerParserError(e.getMessage(), e, source, null);
        }
	}

}
PARSER_END(KastParser)

SKIP :
{
	" "
|	"\t"
|	"\r"
|	"\n"
}

TOKEN :
{
	<KSEQ: "~>">
|	<DOTK: ".::K">
|	<LPAREN: "(">
|	<RPAREN: ")">
|	<COMMA: ",">
|	<DOTKLIST: ".::KList">
|	<TOKENLABEL: "#token">
}

MORE :
{
	"\"": STRING_STATE
|	"`": KLABEL_STATE
|	<["#", "a"-"z"]>: ID_KLABEL_STATE
}

<STRING_STATE> MORE :
{
	<"\\" ~[]>
|	<~["\"", "\\"]>
}

<STRING_STATE> TOKEN :
{
	<STRING: "\"">: DEFAULT
}

<KLABEL_STATE> MORE :
{
	<"\\" ~[]>
|	<~["`", "\\"]>
}

<KLABEL_STATE> TOKEN :
{
	<KLABEL: "`">: DEFAULT
}

<ID_KLABEL_STATE > MORE :
{
    <["a"-"z", "A"-"Z", "0"-"9"]>
}

<ID_KLABEL_STATE> TOKEN :
{
    <ID_KLABEL: ~["a"-"z", "A"-"Z", "0"-"9"]>: DEFAULT
}

Term k() :
{
	List<Term> items = new ArrayList<Term>();
	Term current;
}
{
	current = kitem()
	{
		items.add(current);
	}
	(<KSEQ> current = kitem()
	{
		items.add(current);
	}
	)*
	{
		return new KSequence(items);
	}
|	<DOTK>
	{
		return KSequence.EMPTY;
	}
}

Term kitem() :
{
	Term label;
	Term list;
	String sort;
	String value;
}
{
	label = klabel() <LPAREN> list = klist() <RPAREN>
	{
		return new KApp(label, list);
	}
| 	<TOKENLABEL> <LPAREN> <STRING>
	{
		value = StringUtil.unquoteCString(token.image);
	}
	<COMMA> <STRING>
	{
		sort = StringUtil.unquoteCString(token.image);
	}
	<RPAREN>
	{
		return org.kframework.kil.Token.kAppOf(Sort.of(sort), value);
	}
}

Term klist() :
{
	List<Term> items = new ArrayList<Term>();
	Term current;
}
{
	current = k()
	{
		items.add(current);
	}
	(<COMMA> current = k()
	{
		items.add(current);
	}
	)*
	{
		return new KList(items);
	}
|	<DOTKLIST>
	{
		return KList.EMPTY;
	}
}

Term klabel() :
{
}
{
	<KLABEL>
	{
		return KLabelConstant.of(StringUtil.unescapeKoreKLabel(token.image));
	}
|   <ID_KLABEL>
    {
        return KLabelConstant.of(token.image);
    }
}
