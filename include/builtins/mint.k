// Copyright (c) 2012-2014 K Team. All Rights Reserved.
require "int.k"
require "k-equal.k"
require "list.k"


/*
 * Module implementing machine integers of arbitrary bit width represented in
 * 2's complement.
 */
module MINT
  imports INT-HOOKS
  imports K-EQUAL-HOOKS
  imports LIST

  /* Machine integer of bit width and value. */
  syntax MInt{I} ::= mi(I:Int, Int)    [function, hook(#MINT:constructor)]

  /* Function returning the bit width of this machine integer. */
  syntax I:Int ::= bitwidthMInt(MInt{I})   [function, hook(#MINT:bitwidth)]

  /*
   * Functions returning the signed and unsigned interpretations of this
   * machine integers.
   *   svalue  returns an integer between -2^(bitwidth - 1) and
   *           2^(bitwidth - 1) - 1
   *   uvalue  returns an integer between 0 and 2^bitwidth - 1
   */
  syntax Int ::= svalueMInt(MInt{_})     [function, hook(#MINT:svalue)]
               | uvalueMInt(MInt{_})     [function, hook(#MINT:uvalue)]

  /* Checks whether a machine integer is zero */
  syntax Bool ::= zeroMInt(MInt{_})    [function, hook(#MINT:zero)]

  /*
   * Functions for signed and unsigned minimum and maximum values of a machine
   * integer on a given bit width.
   */
  syntax Int ::= sminMInt(Int)    [function]
               | smaxMInt(Int)    [function]
               | uminMInt(Int)    [function]
               | umaxMInt(Int)    [function]
  rule sminMInt(N:Int) => 0 -Int (1 <<Int (N -Int 1))
  rule smaxMInt(N:Int) => (1 <<Int (N -Int 1)) -Int 1
  rule uminMInt(_:Int) => 0
  rule umaxMInt(N:Int) => (1 <<Int N) -Int 1

  /*
   * Functions checking whether a given integer can be represented on as signed
   * or unsigned on a given bit width without overflow.
   */
  syntax Bool ::= soverflowMInt(Int, Int)   [function]
                | uoverflowMInt(Int, Int)   [function]
  rule
    soverflowMInt(N:Int, I:Int)
  =>
    I <Int sminMInt(N) orBool I >Int smaxMInt(N)
  rule
    uoverflowMInt(N:Int, I:Int)
  =>
    I <Int uminMInt(N) orBool I >Int umaxMInt(N)

  /*
   * Projection functions for results of operations with overflow.
   * miInt(saddMInt(...))         returns the result of the operation (ignoring
   *                              overflow)
   * overflowMInt(saddMInt(...))  returns true if overflow is detected during
   *                              the execution of the operation
   */
  syntax MInt{_} ::= miMInt(List)          [function]
  rule miMInt(ListItem(MI:MInt) ListItem(_:Bool)) => MI
  syntax Bool ::= overflowMInt(List)    [function]
  rule overflowMInt(ListItem(_:MInt) ListItem(B:Bool)) => B

  /*
   * Arithmetic and comparison operations
   *   op   does not interprets th operands as either signed or unsigned
   *   sop  interprets the operands as signed
   *   uop  interprets the operands as unsigned
   */
  /*
   * Addition, subtraction, and multiplication are the same for signed and
   * unsigned integers represented in 2's complement
   */
  syntax MInt{I} ::= addMInt(MInt{I}, MInt{I})   [function, hook(#MINT:add)]
                   | subMInt(MInt{I}, MInt{I})   [function, hook(#MINT:sub)]
                   | mulMInt(MInt{I}, MInt{I})   [function, hook(#MINT:mul)]

  /*
   * Division and reminder
   * sdiv/srem  operation interprets operands as signed; undefined if the second
   *            argument is 0; returns a pair of result and overflow flag
   *            represented as a list of 2 elements (overflow happens when the
   *            first operand is the minimum value and the second operand is -1)
   * udiv/urem  operation interprets operands as unsigned; undefined if the
   *            second argument is 0
   */
  syntax List ::= sdivMInt(MInt{I}, MInt{I})    [function, hook(#MINT:sdiv)]
                | sremMInt(MInt{I}, MInt{I})    [function, hook(#MINT:srem)]
  syntax MInt{I} ::= udivMInt(MInt{I}, MInt{I})    [function, hook(#MINT:udiv)]
                   | uremMInt(MInt{I}, MInt{I})    [function, hook(#MINT:urem)]

  /*
   * Addition, subtraction and multiplication with overflow detection; each
   * operation returns a pair of result and overflow flag represented as a list
   * of 2 elements
   */
  syntax List ::= saddMInt(MInt{I}, MInt{I})    [function, hook(#MINT:sadd)]
                | uaddMInt(MInt{I}, MInt{I})    [function, hook(#MINT:uadd)]
                | ssubMInt(MInt{I}, MInt{I})    [function, hook(#MINT:ssub)]
                | usubMInt(MInt{I}, MInt{I})    [function, hook(#MINT:usub)]
                | smulMInt(MInt{I}, MInt{I})    [function, hook(#MINT:smul)]
                | umulMInt(MInt{I}, MInt{I})    [function, hook(#MINT:umul)]

  /* Shift operations; the second operand must be non-negative */
  syntax MInt{I} ::= shlMInt(MInt{I}, Int)    [function, hook(#MINT:shl)]
                   | ashrMInt(MInt{I}, Int)   [function, hook(#MINT:ashr)]
                   | lshrMInt(MInt{I}, Int)   [function, hook(#MINT:lshr)]

  /* Bitwise operations */
  syntax MInt{I} ::= andMInt(MInt{I}, MInt{I})   [function, hook(#MINT:and)]
                   | orMInt(MInt{I}, MInt{I})    [function, hook(#MINT:or)]
                   | xorMInt(MInt{I}, MInt{I})   [function, hook(#MINT:xor)]

  syntax MInt{I} ::= negMInt(MInt{I})   [function]
  rule negMInt(MI:MInt) => xorMInt(MI, mi(bitwidthMInt(MI), 0))

  /* Comparison operations */
  syntax Bool ::= sltMInt(MInt{I}, MInt{I})   [function, hook(#MINT:slt)]
                | ultMInt(MInt{I}, MInt{I})   [function, hook(#MINT:ult)]
                | sleMInt(MInt{I}, MInt{I})   [function, hook(#MINT:sle)]
                | uleMInt(MInt{I}, MInt{I})   [function, hook(#MINT:ule)]
                | sgtMInt(MInt{I}, MInt{I})   [function, hook(#MINT:sgt)]
                | ugtMInt(MInt{I}, MInt{I})   [function, hook(#MINT:ugt)]
                | sgeMInt(MInt{I}, MInt{I})   [function, hook(#MINT:sge)]
                | ugeMInt(MInt{I}, MInt{I})   [function, hook(#MINT:uge)]
                | eqMInt(MInt{I}, MInt{I})    [function, hook(#MINT:eq)]
                | neMInt(MInt{I}, MInt{I})    [function, hook(#MINT:ne)]

  /*
   * Returns a machine integer with the underlying bits the bits of the first
   * machine integer concatenated with the bits of the second machine integer.
   * The bits of the first machine integer are on the more significant
   * positions.
   */
  syntax MInt{_} ::= concatenateMInt(MInt{_}, MInt{_})   [function, hook(#MINT:concatenate)]

  /*
   * Returns a machine integer with the underlying bits the bits of the given
   * machine integer in the given range. The bit on position 0 is the most
   * significant bit.
   */
  syntax MInt{_} ::= extractMInt(MInt{_}, Int, Int)   [function, hook(#MINT:extract)]

  /*
   * Returns a list of the first digits representing the given machine integer,
   * each digit a machine integer on the given bitwidth. Useful for serializing
   * a integer to a sequence of bytes.
   */
  syntax List ::= digitsOfMInt(MInt{_}, Int, Int)   [function, hook(#MINT:toDigits)]

  /*
   * Returns a machine integer representing the given list of digits. Each digit
   * is represented as a machine integers. The list must be non-empty. Useful
   * for deserializing an integer from a sequence of bytes.
   */
  syntax MInt{_} ::= mIntOfDigits(List)   [function, hook(#MINT:fromDigits)]

endmodule

