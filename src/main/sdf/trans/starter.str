module starter

imports
  libstratego-lib
  libstratego-sglr
  include/Concrete
  xmlify
  disamb
  programs

rules

	/* TODO:
		- lexer rules
			- constante
			- programe
		- latex
		- error messages
			- command line attrs
			- arhitectura pt raportare de erori
		- modularity
	*/

	// the editor will call this:
	callxml = callxml1 <+ callxml2 <+ justFine2

	callxml1:
		(selected, position, ast, path, project-path) -> (filename, result)
	with
		filename := <guarantee-extension(|"xml")> path;
		result   := <callxml> selected
	callxml2:
		(ast, path, project-path) -> <justFine2> ast


	prim-origin-offset = prim("SSL_EXT_origin_offset", <id>)

	// command line will call this:
	// compile like this: java -jar strategoxt.jar -i xmlify.str -o a.out -la stratego-sglr -I .. -m safecallcmd1
	// this will generate a .java file called a.java - put this in a eclipse Java project and export a jar file
	// run like this: java -jar ksyntax.jar d:\work\strategoxt\example.k
	// generate a lib like this: java -jar strategoxt.jar -i xmlify.str -o K3Str -la stratego-sglr --lib -I .. -p k3parser.lib --clean
	// this will generate a bunch of files in K2Str, copy these in a java package and call something like Context.init()

	//callcmd1 = ?[a, b] ; <parse-file(|<import-term(include/KSyntax.tbl)>)> b ; to-xml
	//callcmd2 = ?[a, b] ; <parse-file(|<import-term(include/KSyntax.tbl)>)> b ; debug ; clearamb ; debug ; to-xml


	importTbl       = ?[a, b] ; <ReadFromFile> b ; ?trm ; rules(MemoMyTbl       : _ -> trm)
	importTblGround = ?[a, b] ; <ReadFromFile> b ; ?trm ; rules(MemoMyTblGround : _ -> trm)
	importTblPgm    = ?[a, b] ; <ReadFromFile> b ; ?trm ; rules(MemoMyTblPgm    : _ -> trm)

	javaParseStringConfig = ?[a, b] ; <parse-string(my-parse-error|<MemoMyTbl>, "StartDz")> b              ; (handleErrors <+ justFine)
	javaParseStringRules  = ?[a, b] ; <parse-string(my-parse-error|<MemoMyTbl>, "StartDz")> b              ; (handleErrors <+ justFine)
	javaParseStringCmd    = ?[a, b] ; <parse-string(my-parse-error|<MemoMyTblGround>, "RuleContentDz")> b  ; (handleErrors <+ justFine)
	javaParseStringPgm    = ?[a, b] ; <parse-string(my-parse-error|<MemoMyTblPgm>, a)> b                   ; (handleErrors <+ justFinePgms)
	javaParseStringKore   = ?[a, b] ; <parse-string(my-parse-error|<import-term(include/Concrete.tbl)>)> b ; (handleErrors <+ justFine)

	justFine =
		mydisambiguate ; justFine2
	justFinePgms =
		topdown(try(annolocation)) ; flatten-amb-top ; topdown(try(merge-amb ; flatten-amb-top )) ; makeConsLists ; justFinePgms2

	removeDuplicateAmb:
		amb([x, x]) -> x

	justFinePgms2:
		x -> $[<?xml version="1.0" encoding="UTF-8" ?>
		<T>
			[<to-xml-p>x]
		</T>]

	justFine2:
		x -> $[<?xml version="1.0" encoding="UTF-8" ?>
		<T>
			[<to-xml>x]
		</T>]

	handleErrors =
		(?error(_,_) ; (to-xml-error <+ debug(!"Error: This should not happen. Please report.")))


	to-xml-error:
		error(a, b*) -> $[<?xml version="1.0" encoding="UTF-8" ?>
		<T>
			<error value="[<xmlStringEscapeFromString>a]">
				[b']
			</error>
		</T>
		]
		where b' := <all(to-xml-error)> b*

	to-xml-error:
		localized(a, b) ->
			$[<localized message="[<xmlStringEscape>a]" filename="[<xmlStringEscapeFromString>x]" loc="[loc]" />
			]
		where (!b => (x, area(y1, y2, y3, y4, y5, y6))) <+ (!b => area-in-file(x, area(y1, y2, y3, y4, y5, y6)))
		where loc := <write-to-string> (y1, y2, y3, y4)

	to-xml-error-open:
		[a, b] -> $[<?xml version="1.0" encoding="UTF-8" ?>
		<error value="Open error">
			<file value="[<xmlStringEscapeFromString>b]" />
		</error>
		]


	my-open-error = id //debug(!"OpenError: ")
	my-parse-error = id //debug(!"ParseError: ")

	mydebug = id //debug
	mydebug(a) = id//debug(a)
	// xmlify - starts from here
	xmlStringEscape         = string-replace(|"&", "&amp;") ; string-replace(|">", "&gt;") ; string-replace(|"<", "&lt;") ; string-replace(|"\"", "&quot;") ; string-replace(|"\n", "&#10;") ; string-replace(|"\r", "&#13;")
	xmlStringEscapeFromString = string-replace(|"&", "&amp;") ; string-replace(|">", "&gt;") ; string-replace(|"<", "&lt;") ; string-replace(|"\\\"", "&quot;")
	getLocAsString       = getLocAsString2 <+ ((prim("SSL_EXT_origin_location", <id>) ; write-to-string)) <+ !"(0,0,0,0)"
	getLocAsString2:
		_{loc} -> <write-to-string> loc
	get-original-sentence = prim("SSL_EXT_origin_text", <id>) ; xmlStringEscape ; escape
	external xml-string-escape-from-string(|)

	// ------------------------- doing some tests -------------------------------
	//         java -jar strategoxt.jar -i starter.str -o K3Str -la stratego-sglr --lib -I .. -p k3parser.lib --clean
	// How to add the auxiliary files - first call a store rule that read the file and creates a new rule that reproduces the term
	// call that dynamic rule each time you want the term
	// How to test - the disambiguator rule calls testMe5 which disambiguates - then press "Gen XML" to generate XML
	testMe5 =
		all(all(mydisambiguate)) ; topdown(try(annolocationremove))

	external clear-console(|)

	disambig0 = clear-console ; (disambig2 <+ testMe5)
	disambig2:
		(ast, path, project-path) -> <testMe5> ast

