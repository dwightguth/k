module disamb

imports
	libstratego-lib
	libstratego-gpp
	libstratego-aterm
	libstratego-sglr

	include/Concrete
	xmlify
	starter

strategies

	external mergeamb(|)
	external annolocation(|)
	external annolocationremove(|)

	mydisambiguate =
			topdown(try(annolocation)) ;
			flatten-amb-top ;
			topdown(try(merge-amb ; flatten-amb-top )) ;
			//where(ts1 := <term-size> ; !(ts1, <div> (<mul>(ts1, 100.0) ,ts)) ; debug(!"FlattenedSize(,%): ")) ;
			//topdown(try(annolocationremove)) ;
			//topdown(try(removeDouaPuncte)) ;
			/*disambigCellTypes ;
			topdown(try(correctRewrite)) ;
			topdown(try(correctKseq)) ;
			/*emphasizeVars ;
			type-inferenceTypeSystem ;
			chooseBestFitRec ;
			type-inferenceSupremum ;
			var-type-inference2 ; // new type inference where I correct the first type inference
			flattenKLists ;
			 /**///;
			 id
			//where(ts2 := <term-size> ; !(ts2, <div> (<mul>(ts2, 100.0) ,ts1), <div> (<mul>(ts2, 100.0) ,ts)) ; debug(!"FinalSize(,%,%): "))


	mydisambiguateConfig =
		topdown(try(annolocation)) ;
		flatten-amb-top ;
		topdown(try(merge-amb ; flatten-amb-top )) ;
		//topdown(try(removeDouaPuncte)) ;
		id
			


	merge-amb:
		amb(a*){anno} -> x
		where rez := <mergeamb> a*
		where x := <if <lt>(<length> rez, 2) then !<last> rez else !amb(rez){anno} end>

	mydisambiguate2 = all(mydisambiguate)

	removeDouaPuncte:
		a#(b){loc} -> a#(b'){loc}
		where <string-ends-with(|"Syn")> a
		where <one(?"DouaPuncte"#(_))> b
		where b' := <filter(not(?"DouaPuncte"#(_)))> b

	flattenKLists = bottomup(try(fks2)) ; bottomup(try(flists2))
	fks2:
		K1Seq(a, b) -> "K1Seq"#(<flatten-list> [a', b'])
		where a' := <try(fks3)> a
		where b' := <try(fks3)> b
	fks3:
		"K1Seq"#(a) -> a

	flists2:
		a#([b, c]) -> a#(<flatten-list> [b', c'])
		where <string-ends-with(|"1List")> a
		where b' := <try(flists3(|a))> b
		where c' := <try(flists3(|a))> c

	flists3(|a):
		a#(b) -> b
		

	// manual corrections
	correctKseq:
		amb(x) -> K1Seq(a, b)
		where <one(?K1Seq(a, b))> x

	correctRewrite:
		amb(x) -> rez2
		where <one(isRewrite)> x
		where rez := <filter(isRewrite)> x
		where rez2 := <if <lt>(<length> rez, 2) then !<last> rez else !amb(rez) end>
		
	isRewrite:
		a#(_) -> <id>
		where <string-ends-with(|"Rewrite")> a
			

strategies  // restructure the ambs - thanks Lennart Kats
	flatten-amb-top =
			topdown(repeat(ambr)) ;
			bottomup(try(flatten-amb))

	ambr : amb([amb(x)| z]){anno} -> amb(<union> (x, z)){anno} // first try a simple implode - this may be faster

	flatten-amb:
		amb(a*){anno} -> amb(a'*){anno}
		with a'* := <map(try(extract-ambs)); flatten-list ; nub> a*

	extract-ambs:
		amb(a*) -> a*

// end - thanks Lennart Kats
