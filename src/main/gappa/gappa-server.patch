diff -rupN gappa-1.0.0/src/main.cpp gappa-server/src//main.cpp
--- gappa-1.0.0/src/main.cpp	2013-07-19 18:25:55 +0300
+++ gappa-server/src//main.cpp	2013-09-03 23:46:04 +0300
@@ -10,6 +10,9 @@
 */
 
 #include <iostream>
+#include <limits.h>
+#include <stdio.h>
+#include <string.h>
 
 #include "parameters.hpp"
 #include "backends/backend.hpp"
@@ -20,6 +23,8 @@
 
 extern bool parameter_constrained, parameter_statistics;
 extern int yyparse(void);
+extern int yylex_destroy  (void);
+extern void scan_string(const char* str);
 extern bool detailed_io;
 extern backend *proof_generator;
 dichotomy_sequence dichotomies;
@@ -31,19 +36,107 @@ extern int
   stat_tested_app, stat_successful_app,
   stat_intersected_pred, stat_discarded_pred;
 
-int main(int argc, char **argv)
-{
-  parse_args_status pargs_status = parse_args(argc, argv);
-  if (pargs_status != PARGS_CONTINUE)
-    return pargs_status == PARGS_FAILURE ? EXIT_FAILURE : EXIT_SUCCESS;
-  if (proof_generator) {
-    if (!parameter_constrained) {
-      std::cerr << "Error: unconstrained mode is not compatible with script generation, since proofs are left incomplete.\n";
-      return EXIT_FAILURE;
+std::ostringstream buffer;
+
+#define DEBUG(...) fprintf(stderr, __VA_ARGS__)
+// #define DEBUG(...)
+
+/*
+ read a length-prefixed string of bytes
+ expects a positive 32-bit big-endian integer and that many bytes futher data.
+ puts length in len and returns a pointer to a newly allocated array
+   of len+1 bytes including the data (which might contain embedded NULLs)
+   plus a terminating null
+
+
+ on various error condtiions returns NULL and sets *len negative.
+ on EOF before first byte set *len to -1,
+ on EOF later sets *len to -2,
+ on other errors returns -3.
+*/
+char* recv_string(int* len) {
+  unsigned int inputlen;
+  int i;
+  int c = getc(stdin);
+  DEBUG("Got byte %d\n", c);
+  if (c == EOF) {
+    // EOF at start, tell caller
+    *len = -1;
+    return NULL; 
+  }
+  inputlen = c;
+  DEBUG("Got first byte of string len\n");
+ 
+  for (i = 0; i < 3; ++i) {
+    c = getc(stdin);
+    DEBUG("Got byte %d\n", c);
+    if (c == EOF) {
+      // EOF during header.
+      *len = -2;
+      return NULL;
+    }
+    inputlen *= 256;
+    inputlen += c;
+  }
+  DEBUG("Got string len %u\n", inputlen);
+
+  if (inputlen > INT_MAX) {
+    // invalid length
+    *len = -3;
+    return NULL;
+  }
+
+  *len = inputlen;
+
+  char *data = (char *) malloc(inputlen+1);
+  if (!data) {
+    // malloc failed
+    *len = -3;
+    return NULL;
+  }
+  int got = 0;
+  while (got < inputlen) {
+    DEBUG("Waiting for data\n");
+    ssize_t received = fread(data+got, 1, inputlen-got, stdin);
+    if (received == 0) {
+      // EOF during data.
+      *len = -2;
+      return NULL;
     }
-    proof_generator->initialize(std::cout);
+    if (received == -1) {
+      // error reading data!
+      *len = -3;
+      return NULL;
+    }
+    got += received;
+    DEBUG("Got %d bytes, have %d of %d remain\n", received, got, inputlen);
+  }
+  data[inputlen] = 0;
+
+  return data;
+}
+
+/* process a request,
+   exit process with exit code 0 on EOF before any data,
+   with exit code 1 on EOF later,
+   and with exit code 2 on other errors.
+ */
+int process() {
+
+  // have data.  
+  int len;
+  char *input = recv_string(&len);
+  if (len == -1) {
+    exit(1);
+  }
+  if (len < 0) {
+    exit(1-len);
   }
+
+  DEBUG("input string is \n----\n%s\n----\n", input);
+  scan_string(input);
   if (yyparse()) return EXIT_FAILURE;
+  yylex_destroy();
   preal_vect missing_paths = generate_proof_paths();
   for (preal_vect::const_iterator i = missing_paths.begin(),
        i_end = missing_paths.end(); i != i_end; ++i)
@@ -88,5 +181,56 @@ int main(int argc, char **argv)
       "    yet " << stat_discarded_pred << " proved useless\n"
       "    and " << stat_intersected_pred << " improved existing results.\n";
   }
+//  std::string output = buffer.str();
+  const char* cstr = globally_proven ? "OK" : "FAIL"; // = output.c_str();
+  unsigned int size = strlen(cstr);
+    DEBUG("Got result of %d bytes\n", size);
+
+  unsigned char byte0 = size % 256;
+  size /= 256;
+  unsigned char byte1 = size % 256;
+  size /= 256;
+  unsigned char byte2 = size % 256;
+  size /= 256;
+  unsigned char byte3 = size;
+  putc(byte3, stdout);
+  DEBUG("Wrote byte %u\n", byte3);
+  putc(byte2, stdout);
+  DEBUG("Wrote byte %u\n", byte2);
+  putc(byte1, stdout);
+  DEBUG("Wrote byte %u\n", byte1);
+  putc(byte0, stdout);
+  DEBUG("Wrote byte %u\n", byte0);
+  size = strlen(cstr);
+  ssize_t written = fwrite(cstr, 1, size, stdout);
+  DEBUG("Wrote %zd bytes.\n", written);
+  if (written != size) {
+    exit(2);
+  }
+  fflush(stdout);
   return globally_proven ? EXIT_SUCCESS : EXIT_FAILURE;
 }
+
+int init(int argc, char** argv) 
+{
+  parse_args_status pargs_status = parse_args(argc, argv);
+  if (pargs_status != PARGS_CONTINUE)
+    return pargs_status == PARGS_FAILURE ? EXIT_FAILURE : EXIT_SUCCESS;
+  if (proof_generator) {
+    if (!parameter_constrained) {
+      std::cerr << "Error: unconstrained mode is not compatible with script generation, since proofs are left incomplete.\n";
+      return EXIT_FAILURE;
+    }
+    proof_generator->initialize(buffer);
+  }
+
+}
+
+int main(int argc, char **argv)
+{
+  if (EXIT_FAILURE == init(argc, argv)) return EXIT_FAILURE;
+  DEBUG("Initialized gappa, waiting for input\n");
+  while (1) {
+    process();
+  }
+}
diff -rupN gappa-1.0.0/src/main.cpp.old gappa-server/src//main.cpp.old
--- gappa-1.0.0/src/main.cpp.old	1970-01-01 02:00:00 +0200
+++ gappa-server/src//main.cpp.old	2013-09-02 23:13:44 +0300
@@ -0,0 +1,92 @@
+/*
+   Copyright (C) 2004 - 2010 by Guillaume Melquiond <guillaume.melquiond@inria.fr>
+   Part of the Gappa tool http://gappa.gforge.inria.fr/
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the CeCILL Free Software License Agreement or
+   under the terms of the GNU General Public License version.
+
+   See the COPYING and COPYING.GPL files for more details.
+*/
+
+#include <iostream>
+
+#include "parameters.hpp"
+#include "backends/backend.hpp"
+#include "numbers/interval_utility.hpp"
+#include "parser/ast.hpp"
+#include "proofs/proof_graph.hpp"
+#include "proofs/schemes.hpp"
+
+extern bool parameter_constrained, parameter_statistics;
+extern int yyparse(void);
+extern bool detailed_io;
+extern backend *proof_generator;
+dichotomy_sequence dichotomies;
+property_tree context;
+
+extern int
+  stat_tested_real, stat_discarded_real,
+  stat_tested_theo, stat_discarded_theo,
+  stat_tested_app, stat_successful_app,
+  stat_intersected_pred, stat_discarded_pred;
+
+int main(int argc, char **argv)
+{
+  parse_args_status pargs_status = parse_args(argc, argv);
+  if (pargs_status != PARGS_CONTINUE)
+    return pargs_status == PARGS_FAILURE ? EXIT_FAILURE : EXIT_SUCCESS;
+  if (proof_generator) {
+    if (!parameter_constrained) {
+      std::cerr << "Error: unconstrained mode is not compatible with script generation, since proofs are left incomplete.\n";
+      return EXIT_FAILURE;
+    }
+    proof_generator->initialize(std::cout);
+  }
+  if (yyparse()) return EXIT_FAILURE;
+  preal_vect missing_paths = generate_proof_paths();
+  for (preal_vect::const_iterator i = missing_paths.begin(),
+       i_end = missing_paths.end(); i != i_end; ++i)
+  {
+    std::cerr << "Warning: no path was found for " << dump_real(*i) << ".\n";
+  }
+  bool globally_proven = true;
+  undefined_map umap;
+  graph_t *g = new graph_t(NULL, context);
+  g->populate(property_tree(), dichotomies, 100*1000*1000, &umap);
+  if (!umap.empty()) {
+    std::cerr << "Results:\n";
+    for (undefined_map::const_iterator i = umap.begin(),
+         i_end = umap.end(); i != i_end; ++i)
+    {
+      change_io_format dummy(IO_FULL);
+      std::cerr << "  " << dump_property_nice(i->second) << '\n';
+    }
+  }
+  if (node *n = g->get_contradiction()) {
+    if (proof_generator) {
+      enlarger(node_vect(1, n));
+      instances = &umap;
+      proof_generator->theorem(n);
+    }
+  } else {
+    g->show_negative();
+    globally_proven = false;
+  }
+  g->show_dangling();
+  delete g;
+  if (proof_generator) proof_generator->finalize();
+  if (parameter_statistics) {
+    std::cerr <<
+      "Statistics:\n"
+      "  " << stat_tested_real << " expressions were considered,\n"
+      "    but then " << stat_discarded_real << " of those got discarded.\n"
+      "  " << stat_tested_theo << " theorems were considered,\n"
+      "    but then " << stat_discarded_theo << " of those got discarded.\n"
+      "  " << stat_tested_app << " applications were tried. Among those,\n"
+      "    " << stat_successful_app << " were successful,\n"
+      "    yet " << stat_discarded_pred << " proved useless\n"
+      "    and " << stat_intersected_pred << " improved existing results.\n";
+  }
+  return globally_proven ? EXIT_SUCCESS : EXIT_FAILURE;
+}
diff -rupN gappa-1.0.0/src/parser/lexer.lpp gappa-server/src//parser/lexer.lpp
--- gappa-1.0.0/src/parser/lexer.lpp	2013-07-19 18:25:55 +0300
+++ gappa-server/src//parser/lexer.lpp	2013-09-03 17:49:51 +0300
@@ -85,6 +85,11 @@ static void read_options(YYLTYPE &yylloc
   }
 }
 
+void scan_string(const char* str)
+{
+  yy_switch_to_buffer(yy_scan_string(str));
+}
+
 #define YY_USER_INIT	{ yylloc->first_line = 1; yylloc->first_column = 0; }
 #define YY_USER_ACTION	yylloc->first_column += yyleng;
 
diff -rupN gappa-1.0.0/src/parser/parser_aux.cpp gappa-server/src//parser/parser_aux.cpp
--- gappa-1.0.0/src/parser/parser_aux.cpp	2013-07-19 18:25:55 +0300
+++ gappa-server/src//parser/parser_aux.cpp	2013-09-03 16:52:17 +0300
@@ -203,6 +203,7 @@ extern property_tree context;
 
 void generate_graph(ast_prop const *p)
 {
+  context.clear();
   parse_property_tree(context, p);
   context.negate();
   if (warning_unbound_variable)
