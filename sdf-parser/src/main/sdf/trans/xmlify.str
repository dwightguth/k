// Copyright (c) 2014 K Team. All Rights Reserved.
module xmlify

imports
  libstratego-lib
  libstratego-sglr
  include/Concrete
  disamb
  starter

rules

    external string-unescape-sort(|)
    external string-trim-last-one(|)
    
    getSort:
        x -> y
        where y := <string-trim-last-one ; string-unescape-sort> x
    
    to-xml =
        to-xml1 <+ to-xml2 <+ to-xml3 <+ to-xml4 <+ (debug(!"Error XMLifying at: ") ; !"<error/>")

    to-xml1:
        KSentenceList(a') -> $[[<to-xml>a']]

    // print the K definition as an XML - parsing only the syntax
    to-xml1:
        "Colon"#(_) -> $[]
    to-xml1:
        "QuestionMark"#(_) -> $[]
    to-xml1:
        "ExclamationMarkDz"#(_) -> $[]

    // generate xml for cells
    to-xml1:
        Bag1ClosedCell(a, b', LeftCell(RightCell(c)), d) -> $[<cell label="[a]" endLabel="[d]" loc="[loc]"[prop] ellipses="both" sort="BagItem">
                                            [<to-xml> c]
        </cell>
        ]
        where mydebug(!"Cell: ")
        where prop := <all(to-xml)> b'
        where loc := <getLocAsString>

    to-xml1:
        Bag1ClosedCell(a, b', RightCell(c), d) -> $[<cell label="[a]" endLabel="[d]" loc="[loc]"[prop] ellipses="right" sort="BagItem">
                                            [<to-xml> c]
        </cell>
        ]
        where mydebug(!"Cell: ")
        where prop := <all(to-xml)> b'
        where loc := <getLocAsString>

    to-xml1:
        Bag1ClosedCell(a, b', LeftCell(c), d) -> $[<cell label="[a]" endLabel="[d]" loc="[loc]"[prop] ellipses="left" sort="BagItem">
                                            [<to-xml> c]
        </cell>
        ]
        where mydebug(!"Cell: ")
        where prop := <all(to-xml)> b'
        where loc := <getLocAsString>

    to-xml1:
        Bag1ClosedCell(a, b', c, d) -> $[<cell label="[a]" endLabel="[d]" loc="[loc]"[prop] sort="BagItem">
                                            [<to-xml> c]
        </cell>
        ]
        where mydebug(!"Cell: ")
        where prop := <all(to-xml)> b'
        where loc := <getLocAsString>

    to-xml1:
        "CellProperty"#([a, b]) -> $[[<id>""] [a]=[<xmlStringEscapeFromString>b]]

//----------------------------------------------------------------------
    to-xml1:
        NoLabelSentence(body) ->
        $[<sentence loc="[loc]">
            [body']
        </sentence>
        ]
        where body' := <to-xml> body
        where loc   := <getLocAsString>

    to-xml1:
        LabelSentence(label, body) ->
        $[<sentence loc="[loc]" label="[<xmlStringEscape> label]">
            [body']
        </sentence>
        ]
        where body' := <to-xml> body
        where loc   := <getLocAsString>

    to-xml1:
        NoAttributedSentence(body) -> $[[<to-xml> body]]

    to-xml1:
        AttributedSentence(body, attr) ->
        $[[body']
        <attributes loc="[<getLocAsString> attr]">
            [attr']
        </attributes>
        ]
        where body' := <to-xml> body
        where attr' := <to-xml> attr
        where loc   := <getLocAsString>

    to-xml1:
        NoRequiresSentence(body) -> $[
            <body>
                [<to-xml> body]
            </body>
        ]

    to-xml1:
        RequiresSentence(body, cond) ->
        $[<body>
            [<to-xml> body]
        </body>
        <cond>
            [cond']
        </cond>
        ]
        where body' := <to-xml> body
        where cond' := <to-xml> cond

    to-xml1:
        NoEnsures(body) -> $[[<to-xml> body]]

    to-xml1:
        Ensures(body, cond) ->
        $[[<to-xml> body]
        <ensures>
            [<to-xml> cond]
        </ensures>
        ]



//----------------------------------------------------------------------

    to-xml1:
        Tag(x) -> $[<tag key="[x]" loc="[loc]" />
        ]
        where loc := <getLocAsString>
    //to-xml1:
    //    NoTags() -> $[]
    to-xml1:
        TagList(x1, x2) -> $[[<to-xml> x1][<to-xml> x2]]

    to-xml1:
        TagParam(x, y) -> $[<tag key="[x]" value="[<xmlStringEscape> y]" loc="[loc]" />
        ]
        where loc := <getLocAsString>
    to-xml1:
        "TagString"#([x, y]) -> $[<tag key="[x]" value="[<xml-string-escape-from-string> y]" loc="[loc]" />
        ]
        where loc := <getLocAsString>

    to-xml1:
        BagItem1Break() -> $[<br sort="BagItem"/>
        ]

    to-xml1:
        "K1Seq"#(b) -> $[<KSequence sort="K" loc="[loc]">
                            [children]
        </KSequence>
        ]
        where mydebug(!"KSequence: ")
        where children := <all(to-xml)> b
        where loc := <getLocAsString>

    to-xml1:
        K1App(a, b) -> $[<KApp sort="K" loc="[loc]">
                            <label loc="[<getLocAsString> a]">
                                [<to-xml> a]
                            </label>
                            [<to-xml> b]
        </KApp>
        ]
        where mydebug(!"KApp: ")
        where loc := <getLocAsString>


    to-xml2:
        a#(b) -> $[<empty sort="[sort]" loc="[loc]" userTyped="true"/>
        ]
        where <string-ends-with(|"12Empty")> a
        where mydebug(!"Empty12: ")
        where sort := <getSort> a
        where loc := <getLocAsString>

    to-xml2:
        a#(b) -> $[<empty sort="[sort]" loc="[loc]" userTyped="false"/>
        ]
        where <string-ends-with(|"1Empty")> a
        where mydebug(!"Empty1: ")
        where sort := <getSort> a
        where loc := <getLocAsString>

    to-xml2:
        a#([b, c]) -> $[<cast sort="[sort]" loc="[loc]" type="[<to-cast-type> c]">
                    [children]
        </cast>
        ]
        where <string-ends-with(|"1Cast")> a
        where mydebug(!"1Cast: ")
        where children := <to-xml> b
        where sort := <getSort> a
        where loc := <getLocAsString>
    to-xml2:
        a#([b, c, attr]) -> $[<cast sort="[sort]" loc="[loc]" type="[<to-cast-type> c]">
                    [children]
        <attributes loc="[<getLocAsString> attr]">
            [attr']
        </attributes>
        </cast>
        ]
        where <string-ends-with(|"1CastAttr")> a
        where mydebug(!"1Cast: ")
        where children := <to-xml> b
        where sort := <getSort> a
        where loc := <getLocAsString>
        where attr' := <to-xml> attr


    to-cast-type: "Syntactic"#(_)    -> $[syntactic]
    to-cast-type: "Semantic"#(_)    -> $[semantic]
    to-cast-type: "Inner"#(_)        -> $[inner]
    to-cast-type: "Outer"#(_)        -> $[outer]

    to-xml2:
        a#(_) -> $[<hole sort="K" loc="[loc]" />
        ]
        where <string-ends-with(|"1Hole")> a
        where mydebug(!"Var: ")
        where loc := <getLocAsString>

    to-xml2:
        a#(b) -> $[<var name="[b]" sort="[sort]" loc="[loc]" userTyped="true" />
        ]
        where <string-ends-with(|"12Var")> a
        where mydebug(!"Var: ")
        where sort := <getSort> a
        where loc := <getLocAsString>

    to-xml2:
        a#([b, attr]) -> $[<var name="[b]" sort="[sort]" loc="[loc]" userTyped="true">
        <attributes loc="[<getLocAsString> attr]">
            [attr']
        </attributes>
                </var>
        ]
        where <string-ends-with(|"12VarAttr")> a
        where mydebug(!"Var: ")
        where sort := <getSort> a
        where loc := <getLocAsString>
        where attr' := <to-xml> attr


    to-xml2:
        a#(b) -> $[<var name="[b]" sort="[sort]" loc="[loc]" userTyped="false" />
        ]
        where <string-ends-with(|"1Var")> a
        where mydebug(!"Var: ")
        where sort := <getSort> a
        where loc := <getLocAsString>

    to-xml2:
        a#([b]) -> $[<const value="[<xmlStringEscape> b]" sort="[sort]" loc="[loc]" />
        ]
        where <string-ends-with(|"Const")> a
        where mydebug(!"Const: ")
        where sort := <getSort> a
        where loc := <getLocAsString>

    to-xml2:
        a#(b) -> $[<term sort="[sort]" cons="[a]" loc="[loc]">
                    [children]
        </term>
        ]
        where <string-ends-with(|"Syn")> a
        where mydebug(!"SynTerm: ")
        where children := <all(to-xml)> b
        where sort := <getSort> a
        where loc := <getLocAsString>

    to-xml2:
        a#(b) -> $[<bracket sort="[sort]" loc="[loc]">
                    [children]
        </bracket>
        ]
        where <string-ends-with(|"Bracket")> a
        where mydebug(!"Bracket: ")
        where children := <all(to-xml)> b
        where sort := <getSort> a
        where loc := <getLocAsString>

    to-xml2:
        a#([b, c]) -> $[<rewrite sort="[sort]" loc="[loc]">
                            <left>
                                [<to-xml> b]
                            </left>
                            <right>
                                [<to-xml> c]
                            </right>
        </rewrite>
        ]
        where <string-ends-with(|"Rewrite")> a
        where mydebug(!"Rewrite: ")
        where sort := <getSort> a
        where loc := <getLocAsString>

    to-xml2:    // sort wrappers
        a#(b) -> $[<[sort] sort="[sort]" loc="[loc]">
                        [children]
        </[sort]>
        ]
        where <string-ends-with(|"List")> a
        where mydebug(!"1List: ")
        where children := <all(to-xml)> b
        where sort := <getSort> a
        where loc := <getLocAsString>

    to-xml2:    // sort items
        a#([b]) -> $[<[sort] sort="[sort]" loc="[loc]">
                        [<to-xml> b]
        </[sort]>
        ]
        where <string-ends-with(|"Item")> a
        where mydebug(!"Wrap: ")
        where sort := <getSort> a
        where loc := <getLocAsString>
    to-xml2:    // sort items
        a#([b, c]) -> $[<[sort] sort="[sort]" loc="[loc]">
                            <key>
                                [<to-xml> b]
                            </key>
                            <value>
                                [<to-xml> c]
                            </value>
        </[sort]>
        ]
        where <string-ends-with(|"Item")> a
        where mydebug(!"Wrap: ")
        where sort := <getSort> a
        where loc := <getLocAsString>

    to-xml3:
        amb(b) -> $[<amb loc="[loc]">
                        [children]
        </amb>
        ]
        where mydebug(!"XmlifyingAmb: ")
        where children := <all(to-xml)> b
        where loc := <getLocAsString>

    to-xml4:
        a#(b) -> $[<term general="true" sort="[sort]" cons="[a]" loc="[loc]">
                    [children]
        </term>
        ]
        where debug(!"GTerm: ")
        where sort := <getSort> a
        where children := <all(to-xml)> b
        where loc := <getLocAsString>

    // -----------------------------------------------------
    // - this second part is related to xmlifying programs -
    // -----------------------------------------------------

    to-xml-p:
        a#(b) -> $[<term sort="[srt]" cons="[a]" loc="[loc]">
                    [children]
        </term>
        ]
        where <string-ends-with(|"Syn")> a
        where mydebug(!"SynTerm: ")
        where children := <all(to-xml-p)> b
        where srt := <getSort> a
        where loc := <getLocAsString>

    to-xml-p:
        a#(b) -> $[<KApp sort="K" loc="[loc]">
                            <label loc="[loc]">
                                <const sort="KLabel" value="#sym[srt]" loc="[loc]"/>
                            </label>
                            [<all(to-xml-p)> b]
        </KApp>
        ]
        where <string-ends-with(|"Symb")> a
        where mydebug(!"SymbTerm: ")
        where srt := <getSort> a
        where loc := <getLocAsString>

    to-xml-p:
        a#(b) -> $[<empty sort="[srt]" loc="[loc]"/>
        ]
        where <string-ends-with(|"Empty")> a
        where mydebug(!"Empty: ")
        where srt := <getSort> a
        where loc := <getLocAsString>

    to-xml-p:
        a#(b) -> $[<const sort="[srt]" value="[<all(xmlStringEscape)> b]" loc="[loc]"/>
        ]
        where <string-ends-with(|"Const")> a
        where srt := <getSort> a
        where mydebug(!"Const: ")
        where loc := <getLocAsString>

    to-xml-p:
        amb(b) -> $[<amb loc="[loc]">
                        [children]
        </amb>
        ]
        where mydebug(!"XmlifyingAmb: ")
        where children := <all(to-xml-p)> b
        where loc := <getLocAsString>

    to-xml-p:
        a#(b) -> $[<bracket sort="[sort]" loc="[loc]">
                    [children]
        </bracket>
        ]
        where <string-ends-with(|"Bracket")> a
        where mydebug(!"Bracket: ")
        where children := <all(to-xml-p)> b
        where sort := <getSort> a
        where loc := <getLocAsString>

