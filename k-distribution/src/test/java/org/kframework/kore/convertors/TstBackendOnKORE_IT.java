// Copyright (c) 2014-2015 K Team. All Rights Reserved.

package org.kframework.kore.convertors;

import com.google.inject.Guice;
import com.google.inject.Injector;
import com.google.inject.name.Names;
import org.junit.Test;
import org.junit.rules.TestName;
import org.kframework.attributes.Source;
import org.kframework.backend.java.compile.KOREtoBackendKIL;
import org.kframework.backend.java.indexing.IndexingTable;
import org.kframework.backend.java.kil.ConstrainedTerm;
import org.kframework.backend.java.kil.Definition;
import org.kframework.backend.java.kil.GlobalContext;
import org.kframework.backend.java.kil.KLabelConstant;
import org.kframework.backend.java.kil.TermContext;
import org.kframework.backend.java.symbolic.JavaExecutionOptions;
import org.kframework.backend.java.symbolic.JavaSymbolicCommonModule;
import org.kframework.backend.java.symbolic.KILtoBackendJavaKILTransformer;
import org.kframework.backend.java.symbolic.Stage;
import org.kframework.backend.java.symbolic.SymbolicRewriter;
import org.kframework.backend.java.util.JavaKRunState;
import org.kframework.definition.Module;
import org.kframework.kompile.CompiledDefinition;
import org.kframework.kompile.Kompile;
import org.kframework.kompile.KompileOptions;
import org.kframework.kore.K;
import org.kframework.krun.api.KRunState;
import org.kframework.krun.api.io.FileSystem;
import org.kframework.krun.ioserver.filesystem.portable.PortableFileSystem;
import org.kframework.main.GlobalOptions;
import org.kframework.parser.ProductionReference;
import org.kframework.unparser.AddBrackets;
import org.kframework.unparser.KOREToTreeNodes;
import org.kframework.utils.errorsystem.KExceptionManager;
import org.kframework.utils.file.FileUtil;
import org.kframework.utils.inject.RequestScoped;
import org.kframework.utils.inject.SimpleScope;
import org.kframework.utils.options.SMTOptions;
import scala.collection.JavaConversions;

import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.function.BiFunction;

import static org.kframework.Collections.*;
import static org.kframework.definition.Constructors.*;

public class TstBackendOnKORE_IT {

    @org.junit.Rule
    public TestName name = new TestName();

    protected File testResource(String baseName) throws URISyntaxException {
        return new File(TstTinyOnKORE_IT.class.getResource(baseName).toURI());
    }

    @Test
    public void kore_imp() throws IOException, URISyntaxException {

        String filename = "/convertor-tests/" + name.getMethodName() + ".k";

        File definitionFile = testResource(filename);
        KExceptionManager kem = new KExceptionManager(new GlobalOptions());
        try {
            CompiledDefinition compiledDef = new Kompile(new KompileOptions(), FileUtil.testFileUtil(), kem, false).run(definitionFile, "IMP", "IMP-SYNTAX", "K");

            BiFunction<String, Source, K> programParser = compiledDef.getProgramParser();

            K program = programParser.apply(
                    "<T><k> while(0<=n) { s = s + n; n = n + -1; } </k><state>n|->10 s|->0</state></T>", Source.apply("generated by " + getClass().getSimpleName()));

            final Definition definition = new Definition(compiledDef.executionModule(), kem);

            SimpleScope requestScope = new SimpleScope();
            Injector injector = Guice.createInjector(new JavaSymbolicCommonModule() {
                @Override
                protected void configure() {
                    super.configure();
                    bind(GlobalOptions.class).toInstance(new GlobalOptions());
                    bind(SMTOptions.class).toInstance(new SMTOptions());
                    bind(Definition.class).toInstance(definition);
                    bind(Stage.class).toInstance(Stage.REWRITING);
                    bind(FileSystem.class).to(PortableFileSystem.class);
                    bind(ProcessBuilder.class).toProvider(ProcessBuilder::new);
                    bind(FileUtil.class).toInstance(FileUtil.testFileUtil());

                    bindScope(RequestScoped.class, requestScope);
                    bind(SimpleScope.class).annotatedWith(Names.named("requestScope")).toInstance(requestScope);
                }
            });
            requestScope.enter();
            try {
                TermContext termContext = TermContext.of(injector.getInstance(GlobalContext.class));
                termContext.global().setDefinition(definition);

                JavaConversions.setAsJavaSet(compiledDef.executionModule().attributesFor().keySet()).stream()
                        .map(l -> KLabelConstant.of(l.name(), definition))
                        .forEach(definition::addKLabel);
                definition.addKoreRules(compiledDef.executionModule(), termContext);

                Definition evalutedDef = KILtoBackendJavaKILTransformer.expandAndEvaluateDefinition(termContext.global(), kem);

                evalutedDef.setIndex(new IndexingTable(() -> evalutedDef, new IndexingTable.Data()));

                SymbolicRewriter rewriter = new SymbolicRewriter(evalutedDef, new KompileOptions(), new JavaExecutionOptions(), new KRunState.Counter());

                KOREtoBackendKIL converter = new KOREtoBackendKIL(termContext);
                JavaKRunState result = (JavaKRunState) rewriter.rewrite(new ConstrainedTerm(converter.convert(program), termContext), termContext.definition().context(), -1, false);
                K kResult = result.getJavaKilTerm();
                Module unparsingModule = compiledDef.getParserModule(Module("UNPARSING", Set(compiledDef.executionModule(), compiledDef.syntaxModule(), compiledDef.getParsedDefinition().getModule("K-SORT-LATTICE").get()), Set(), Att()));
                System.err.println(KOREToTreeNodes.toString(new AddBrackets(unparsingModule).addBrackets((ProductionReference) KOREToTreeNodes.apply(KOREToTreeNodes.up(kResult), unparsingModule))));
            } finally {
                requestScope.exit();
            }
        } finally {
            kem.print();
        }
    }

    private class GetSymbolicRewriter {
        private final Module module;
        private final KExceptionManager kem;
        private Definition definition;
        private TermContext termContext;
        private SymbolicRewriter rewriter;
        private SimpleScope requestScope;

        public GetSymbolicRewriter(Module module, KExceptionManager kem) {
            this.module = module;
            this.kem = kem;
        }

        public Definition getDefinition() {
            return definition;
        }

        public SymbolicRewriter getRewriter() {
            return rewriter;
        }

        public SimpleScope getRequestScope() { return requestScope; }

        public GetSymbolicRewriter invoke() {

            return this;
        }
    }
}
